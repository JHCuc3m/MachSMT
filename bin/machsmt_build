#!/usr/bin/env python3

import argparse
import os
import pickle
import sys

import machsmt.settings as settings
from machsmt.db import DB
from machsmt.model_maker import model_maker
from machsmt.selector import LearnedModel
from machsmt.db import get_db

def die(msg):
    print("[machsmt_build] Error: {}".format(msg))
    sys.exit(1)

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('-logic', '--logic', type=str, default=None)
    parser.add_argument('-track', '--track', type=str, default=None)
    parser.add_argument('--limit-training', action='store_true')
    args = parser.parse_args()

    if not os.path.isdir(settings.LIB_DIR):
        os.mkdir(settings.LIB_DIR)

    if args.logic != None and args.logic not in get_db().db:
        die('logic: ' + args.logic + ' not found')

    if args.track != None and args.track not in get_db().db[args.logic]:
        die('Track: ' + args.track + ' not found.')
        sys.exit(1)

    if args.limit_training:
        settings.EXTRA_MAX = 0

    for logic in get_db().db:
        if args.logic != None and logic != args.logic:
            continue

        if not os.path.isdir(os.path.join(settings.LIB_DIR, logic)):
            os.mkdir(os.path.join(settings.LIB_DIR, logic))

        for track in get_db().db[logic]:
            if args.track != None and track != args.track:
                continue
            lm = LearnedModel(
                logic=logic,
                track=track,
                db=get_db().db[logic][track],
                model_maker=model_maker
            )
            lm.run()
            track_name = track.split('/')[-1]
            with open(os.path.join(settings.LIB_DIR, logic, track_name), 'wb') as outfile:
                pickle.dump(lm, outfile)
