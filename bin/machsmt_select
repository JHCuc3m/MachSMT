#!/usr/bin/env python3

import machsmt.settings as settings
import argparse, os, sys, pickle

def die(msg):
    print("[machsmt_select] Error: {}".format(msg))
    sys.exit(1)

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file',  type=str, required=True,
            help = "the input SMT2 file to select a solver for")
    parser.add_argument('-l', '--logic', type=str, required=True,
            help = "the SMT2 logic the given SMT2 input is in (the logic to "\
                    "load the EHM model for)")
    parser.add_argument('-t', '--track', type=str, required=True,
            help = "the scoring system to base the selection on (based on the " \
                   "tracks and scoring system of SMT-COMP 2019), one of "\
                   "'Single_Query_Track', 'Incremental_Track', "\
                   "'Unsat_Core_Track', 'Challenge_Track_non-incremental', "\
                   "'Challenge_Track_incremental'")
    args = parser.parse_args()

    if not os.path.exists(args.file):
        die("Could not find file '{}'".format(args.file))
    if os.path.isdir(args.file):
        die("Given input file is a directory")

    file = os.path.abspath(args.file)

    if not os.path.exists(settings.LIB_DIR):
        die("No models found on system, expected in directory '{}'.".format(
            settings.LIB_DIR))

    if not os.path.exists(os.path.join(settings.LIB_DIR, args.logic)):
        die("Could not find learned model for logic '{}'".format(args.logic))


    track = args.track
    if track.find('/') != -1:
        track = track.split('/')[-1]

    if not os.path.exists(os.path.join(settings.LIB_DIR, args.logic, track)):
        die("No model for track '{}', in logic '{}' ".format(
                    args.track, args.logic))

    with open(os.path.join(settings.LIB_DIR, args.logic, track), 'rb') as infile:
        lm = pickle.load(infile)
        print(lm.predict(args.file))
