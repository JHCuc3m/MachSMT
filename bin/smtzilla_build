#!/usr/bin/python3
import os,pickle,argparse,pdb,sys
from smtzilla.db import DB
from smtzilla.model_maker import model_maker

parser = argparse.ArgumentParser()
parser.add_argument('-theory', '--theory',type=str,default=None )
parser.add_argument('-track', '--track',type=str,default=None)
args = parser.parse_args()
root = os.path.dirname(os.path.realpath(__file__))[:-3] ##(safely?) navigate to root of smtzilla repo
os.chdir(root)
if not os.path.isdir(root+'lib'):
    os.mkdir(root+'lib')

db = None
if not os.path.exists(root+'lib/db.p'):
    db = DB()
    db.build()
    db.tidy()
    pickle.dump(db, open( root+"lib/db.p", "wb" ))    
else:
    db = pickle.load(open( root+"lib/db.p", "rb" ))

if args.theory != None and args.theory not in db.db:
    print('Theory: ' + args.theory + ' not found')
    sys.exit(1)
if args.track != None and args.track not in db.db[args.theory]:
    print('Track: ' + args.track + ' not found.')
    sys.exit(1)

for theory in db.db:
    if theory == 'QF_UFIDL' or theory == 'UFLIA':
        continue
    if args.theory != None and theory != args.theory:
        continue
    if not os.path.isdir(root+'lib/'+theory):
        os.mkdir(root+'lib/'+theory)
    for track in db.db[theory]:
        if theory == 'QF_UFIDL' or theory == 'UFLIA':
            lm = LearnedModel(
                theory=theory,
                track=track,
                db=db.db[theory][track],
                model_maker=model_maker
            )
            lm.calc_features()
            lm.eval_and_build()
            lm.plot()


# import time
# tic = time.time()
# lm = LearnedModel(
#     theory='UFIDL',
#     track='smt-comp/2019/results/Single_Query_Track',
#     db=db.db['UFIDL']['smt-comp/2019/results/Single_Query_Track'],
#     model_maker=model_maker
# )
# lm.calc_features()
# lm.eval_and_build()
# lm.plot()
# print("TIME: " + str(time.time() - tic))

# for theory,track,n in theory_track_N_pairs:
#     print(theory,track,n)
#     if theory == 'QF_UFIDL' or theory == 'UFLIA' or n < 75:
#         print("Skipping")
#         continue
#     lm = LearnedModel(
#         theory=theory,
#         track=track,
#         db=db.db[theory][track],
#         model_maker=model_maker
#     )      
#     lm.calc_features()
#     lm.eval_and_build()
#     lm.plot()